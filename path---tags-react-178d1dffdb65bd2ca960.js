webpackJsonp([84586273293571],{357:function(s,n){s.exports={pathContext:{posts:[{html:'<h2>你不需要把每個元件都用 styled component 包起來</h2>\n<p>剛開始在使用 styled components 的時候我常會去把每個需要套用樣式的元件都用 styled component 包起來，像是：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Header <span class="token operator">=</span> styled<span class="token punctuation">.</span>header<span class="token template-string"><span class="token string">`\n  display: flex;\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> H1 <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token string">`\n  font-weight: normal;\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> H2 <span class="token operator">=</span> styled<span class="token punctuation">.</span>H2<span class="token template-string"><span class="token string">`\n  font-size: 22px;\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Span <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token template-string"><span class="token string">`\n  color: #ff4400;\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Example</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Header<span class="token operator">></span>\n      <span class="token operator">&lt;</span>H1<span class="token operator">></span>\n        My<span class="token operator">&lt;</span>Span className<span class="token operator">=</span><span class="token string">"highlight"</span><span class="token operator">></span>Website<span class="token operator">&lt;</span><span class="token operator">/</span>Span<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>H1<span class="token operator">></span>\n      <span class="token operator">&lt;</span>H2<span class="token operator">></span>This is an awesome site built by me <span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>H2<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>這樣的程式碼寫久了之後就會發現一個問題，一個就是每次你需要給某個元件樣式時，你都需要重新用 styled component 把那個 React 元件/HTML 元素重新命名，光是想名字就很麻煩，而且有時候真的就只是加上一行 CSS 屬性而以。但其實 styled component 也提供了另一種寫法，使用上比較像是 Sass 的用法：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Header <span class="token operator">=</span> styled<span class="token punctuation">.</span>header<span class="token template-string"><span class="token string">`\n  display: flex;\n\n  h1 {\n    font-weight: normal;\n  }\n\n  h2 {\n    font-size: 22px;\n  }\n\n  .highlight {\n    color: #ff4400;\n  }\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Example</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Header<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">></span>\n        My<span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"highlight"</span><span class="token operator">></span>Website<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h2<span class="token operator">></span>This is an awesome site built by me <span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',id:"/Users/joshua/Desktop/dev/blog/src/pages/2018-01-15-in-the-beginning/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2019-12-23",path:"/styled-components-tips-and-tricks",title:"幾個 styled-components 使用上的技巧",excerpt:"",tags:["前端","styled-components","React"]}},{html:'<p>在 2017 年底我參加了 iT 邦幫忙辦的鐵人賽，挑戰連續三十天不中斷的發文，而我寫的主題是<strong>Chrome 開發者工具</strong>，在經歷痛苦的三十天後 XD，我跟隊友一起完成了這個比賽。比賽完之後因為<del>手有點癢</del>發現寫文章其實沒有我想像中這麼難，並且我一直以來不寫的藉口之一：沒有時間，好像也不是這麼大的一個問題；再加上 <a href="http://egghead.io/">egghead</a> 最近剛好有一個課程: <a href="https://egghead.io/courses/build-a-blog-with-react-and-markdown-using-gatsby">Build a Blog with React and Markdown using Gatsby\n</a>在教怎麼用 Gatsby 來建立一個部落格，所以我就立馬架了一個部落格(你現在正在看的這篇文章就是喔 XD)，新的一年來寫點文章吧。</p>\n<p>而我這篇文章主要記錄的內容會是在用 Gatsby 架完這個部落格之後的調整，前面的怎麼安裝 Gatsby 還有一些基礎的頁面設置及發佈，你可以看 egghead 的課程。喔？你沒有訂閱 egghead？<del>趕快去訂閱啊啊啊</del> 沒關係，作者的原始碼放在 <a href="https://github.com/eggheadio-projects/gatsby-demo-blog-code">GitHub</a> 上，所以我們可以：</p>\n<p>先複製一份原始碼到你的電腦上</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code>git clone https://github.com/eggheadio-projects/gatsby-demo-blog-code.git</code></pre>\n      </div>\n<p>切換到這個資料夾裡</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code>cd gatsby-demo-blog-code</code></pre>\n      </div>\n<p>安裝相依套件</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code># 如果你是使用 npm，那請使用 npm install\nyarn</code></pre>\n      </div>\n<p>開始開發</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code> gatsby develop</code></pre>\n      </div>\n<p>現在打開你的 \b<code>localhost:8000</code> 你應該就會看到你的部落格了。</p>\n<h2>Linting</h2>\n<p>這幾年在開始一個新專案的時候，我都要先導入的工具之一就是 <a href="https://eslint.org/">\bESLint</a>，它可以在程式還沒有執行前就先在編輯器裡幫我們做一些靜態的檢查，它分成了兩大部份，一種是程式面的問題檢查，像是：你宣告了變數，但這個變數最後沒有用到，或是你在開發時使用了 debugger 關鍵字，但是沒有移除掉。\b 另一種檢查是程式排版樣式的檢查，像是 Array 或是 Object 號前後要不要加上一個額外的空白，String 值要用單引號還是雙引號這種不會影響程式運作，而是程式設計者的寫作偏好。</p>',id:"/Users/joshua/Desktop/dev/blog/src/pages/2019-12-23-styled-components-tips-and-tricks/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-15",path:"/in-the-beginning",title:"用 Gatsby 來建立一個部落格",excerpt:"",tags:["前端","Gatsby","React","HowTo"]}}],tagName:"React"}}}});
//# sourceMappingURL=path---tags-react-178d1dffdb65bd2ca960.js.map